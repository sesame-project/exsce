- name: Geometry
  description: Geometric concepts such as spatial relations, their coordinates or geometric shapes.
  files:
  - name: coordinates.json
    path: https://comp-rob2b.github.io/metamodels/geometry/coordinates.json
    description: Coordinate representations associated with spatial relations such as position coordinate vectors or discrete cosine matrices
  - name: spatial-operators.json
    path: https://comp-rob2b.github.io/metamodels/geometry/spatial-operators.json
    description: Operators on spatial relations such as the composition of positions
  - name: spatial-relations.json
    path: https://comp-rob2b.github.io/metamodels/geometry/spatial-relations.json
    description: Spatial relations include positions (linear and angular) and their time derivatives (velocities and accelerations) but also directional (e.g. left/right or in front of) and distance relations (between different structural entities)
  - name: structural-entities.json
    path: https://comp-rob2b.github.io/metamodels/geometry/structural-entities.json
    description: The most fundamental geometric entities and relations including points, vectors, frames or simplicial complices (the "skeleton" of a rigid body)
  - name: polytope.json
    path: https://hbrs-sesame.github.io/metamodels/geometry/polytope.json
    description: Concepts to model polytopes

- name: Kinematic Chain
  description: Kinematic chains are motion constraints between geometric entities
  files:
  - name: operators.json
    path: https://comp-rob2b.github.io/metamodels/kinematic-chain/operators.json
    description: Operators on kinematic chains include maps between joint space and Cartesian space quantities (e.g. forward kinematics) but also projections that occur in dynamics solvers
  - name: state.json
    path: https://comp-rob2b.github.io/metamodels/kinematic-chain/state.json
    description: Simple joints can have constrained, lower-dimensional representations of the joint's motion state which includes joint positions, velocities and accelerations
  - name: structural-entities.json
    path: https://comp-rob2b.github.io/metamodels/kinematic-chain/structural-entities.json
    description: Structural entities of kinematic chains are all about joints that constrain the relative motion between geometric entities

- name: Algorithm
  description:
    According to [Merriam-Webster](https://www.merriam-webster.com/dictionary/algorithm),
    an algorithm can be broadly defined as "a step-by-step procedure for solving a problem
    or achieving a desired outcome." When it comes to Multi-Robot Systems (MRS), our focus
    lies in computational problems that are pertinent to implementing various MRS behaviors.
  files:
  - name: algorithm.json
    path: https://comp-rob2b.github.io/metamodels/algorithm.json
    description:
      Metamodel to specify the computations necessary for MRS to achieve the goals.
      (TODO link to longer documentation).

- name: Dynamics
  description: TODO
  files:
  - name: newtonian-rigid-body-dynamics.json
    path: https://comp-rob2b.github.io/metamodels/newtonian-rigid-body-dynamics.json
    description: TODO

- name: Physical Quantities and Units
  description: Any robot model must conform to physical quantities and units because a robotic system acts in the physical world
  files:
  - name: qudt.json
    path: https://comp-rob2b.github.io/metamodels/qudt.json
    description: QUDT is an established ontology of physical quantities and units, here we just represent the JSON-LD context

- name: Acceptance Criteria
  description: Metamodels for specifying acceptance criteria of robotic scenarios.
  files:
  - name: bdd.json
    path: https://hbrs-sesame.github.io/metamodels/acceptance-criteria/bdd.json
    description:
      Metamodel for specifying BDD templates and their variants, see
      [documentation](https://hbrs-sesame.github.io/bdd-dsl/bdd-concepts.html#bdd-scenario-templates-and-variants)
  - name: agent.json
    path: https://hbrs-sesame.github.io/metamodels/agent.json
    description:
      Metamodel for specifying agents in a robotic scenario, see
      [documentation](https://hbrs-sesame.github.io/bdd-dsl/bdd-concepts.html#agent)
  - name: environment.json
    path: https://hbrs-sesame.github.io/metamodels/environment.json
    description:
      Metamodel for specifying elements in the environment of a robotic scenario, see
      [documentation](https://hbrs-sesame.github.io/bdd-dsl/bdd-concepts.html#environment)
  - name: task.json
    path: https://hbrs-sesame.github.io/metamodels/task.json
    description:
      Metamodel for specifying task-related concepts and relations in a robotic scenario, see
      [documentation](https://hbrs-sesame.github.io/bdd-dsl/bdd-concepts.html#task)

- name: Coordination
  description: Metamodels for coordinating the execution of robot behaviours
  files:
  - name: event.json
    path: https://hbrs-sesame.github.io/metamodels/coordination/event.json
    description:
      Metamodel for specifying event-driven coordination of robot behaviours, see
      [documentation](https://hbrs-sesame.github.io/bdd-dsl/bdd-concepts.html#coordination)

- name: Floor Plan
  description: Metamodels for specifying indoor environments and objects
  files:
    - name: floor-plan.json
      path: https://hbrs-sesame.github.io/metamodels/floor-plan/floor-plan.json
      description: Concepts for modelling floor plans
    - name: object.json
      path: https://hbrs-sesame.github.io/metamodels/floor-plan/object.json
      description: Concepts for modelling objects
    - name: state.json
      path: https://hbrs-sesame.github.io/metamodels/floor-plan/state.json
      description: Concepts for modelling states

- name: Simulation
  description: Metamodels for specific simulators
  files:
    - name: gazebo.json
      path: https://hbrs-sesame.github.io/metamodels/simulation/gazebo.json
      description: Concepts for modelling the visual and collision representation of objects for Gazebo
